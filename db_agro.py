import requests
from bs4 import BeautifulSoup
import pandas as pd
import streamlit as st
from datetime import datetime
import altair as alt

def obter_informacoes_commodity(commodity):
    url = f"https://www.noticiasagricolas.com.br/cotacoes/{commodity}"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Obter o t√≠tulo
    titulo = soup.find('a', {'href': f'/cotacoes/{commodity}'}).text

    # Obter as informa√ß√µes na segunda coluna (td) da segunda linha (tr)
    linha_tabela = soup.find_all('tr')[1]
    dados_tabela = linha_tabela.find_all('td')[1].text

    # Exibir a cota√ß√£o atual
    st.sidebar.write("**Cota√ß√£o atual:** R$", dados_tabela)

    # Para obter o hist√≥rico de pre√ßos do produto
    link_historico = soup.find('a', {"class": "mostrar-historico"})["href"]
    link_historico_completo = f"https://www.noticiasagricolas.com.br{link_historico}"

    # Acessar o novo link gerado por "link_historico_completo"
    novo_response = requests.get(link_historico_completo)
    novo_soup = BeautifulSoup(novo_response.text, 'html.parser')

    # Encontrar todas as informa√ß√µes com a tag <td> na nova p√°gina
    resultados = novo_soup.find_all('td')

    # Organizar os resultados em listas separadas para cada coluna
    tipo_resultado = 0
    datas = []
    precos = []

    for resultado in resultados:
        texto = resultado.text.strip()

        if tipo_resultado == 0:
            datas.append(texto)
        elif tipo_resultado == 1:
            precos.append(texto)

        tipo_resultado += 1
        if tipo_resultado == 3:
            tipo_resultado = 0

        if len(datas) >= 11:
            break

    # Verificar se as listas t√™m o mesmo tamanho
    tamanho = min(len(datas), len(precos))

    # Converter as datas para o formato correto
    datas_formatadas = [datetime.strptime(data, "%d/%m/%Y").strftime("%d/%m/%Y") for data in datas[:tamanho]]

    # Criar um dataframe com as colunas "Datas" e "Pre√ßos"
    df = pd.DataFrame({"Datas": datas_formatadas, "Pre√ßos": precos[:tamanho]})

    # Ordenar o dataframe por data
    df = df.sort_values(by="Datas")

    # Exibir o t√≠tulo "Hist√≥rico de Pre√ßos"
    st.subheader("Hist√≥rico de Pre√ßos")
    st.markdown(link_historico_completo)

    # Exibir o dataframe com as colunas "Datas" e "Pre√ßos" apenas se o bot√£o "Exibir Tabela" for clicado
    if st.button("Exibir Tabela"):
        st.write(df[["Datas", "Pre√ßos"]])

    # Plotar o gr√°fico
    plotar_grafico(df)


def plotar_grafico(df):
    # Ordenar o dataframe por data
    df = df.sort_values(by="Datas")

    # Obter op√ß√µes de ordena√ß√£o
    ordenacao_opcoes = ['Ascending', 'Descending']

    # Permitir que o usu√°rio escolha a ordem de classifica√ß√£o
    ordenacao = st.selectbox('Ordena√ß√£o dos pre√ßos:', ordenacao_opcoes)

    # Definir a ordem com base na escolha do usu√°rio
    if ordenacao == 'Ascending':
        sort_order = 'ascending'
    else:
        sort_order = 'descending'

    # Plotar o gr√°fico utilizando a biblioteca Altair
    chart = alt.Chart(df).mark_line().encode(
        x='Datas',
        y=alt.Y('Pre√ßos', sort=alt.EncodingSortField(field='Pre√ßos', order=sort_order))
    ).properties(
        width=600,
        height=400
    )

    # Exibir o gr√°fico no Streamlit
    st.altair_chart(chart, use_container_width=True


# Cabe√ßalho do aplicativo
st.markdown(title_html, unsafe_allow_html=True)
st.markdown('<div class="title"><h2>Agroboard - Dashboard Agro üå±</h2></div>', unsafe_allow_html=True)

# Divis√£o entre o t√≠tulo do projeto e o restante da p√°gina
st.markdown("---")

# Dicion√°rio de correla√ß√£o entre a chave (op√ß√£o selecionada) e o valor (commodity correspondente)
commodity_correlacao = {
    "Boi Gordo üêÇ": "boi-gordo",
    "Soja üå±": "soja",
    "Caf√© ‚òï": "cafe",
    "Frango üê•": "frango",
    "Laranja üçä": "laranja",
    "Milho üåΩ": "milho"
}

# Selecionar a commodity desejada do usu√°rio na barra lateral
commodity_selecionada = st.sidebar.selectbox("Categorias (Commodities)", list(commodity_correlacao.keys()))

# Verificar se a op√ß√£o selecionada tem uma correspond√™ncia
if commodity_selecionada in commodity_correlacao:
    # Obter o valor correspondente no dicion√°rio de correla√ß√£o
    commodity = commodity_correlacao[commodity_selecionada]

    # Chamada da fun√ß√£o com a commodity correlacionada
    obter_informacoes_commodity(commodity)
else:
    st.write("N√£o foi encontrada uma correspond√™ncia para a commodity selecionada.")

# Resumo do projeto
st.sidebar.markdown("---")
st.sidebar.markdown("**Projeto Agroboard**")
st.sidebar.write("O Agroboard - o dashboard agro, tem como objetivo facilitar informa√ß√µes importantes aos empres√°rios do agroneg√≥cio. Sendo assim, a plataforma disponibiliza aos seus usu√°rios as cota√ß√µes atualizadas dos principais produtos agr√≠colas que movimentam a economia no territ√≥rio brasileiro. Desta forma, facilitamos o processo de comunica√ß√£o entre os √≥rg√£os reguladores e os demais membros da comunidade agr√≠cola. As informa√ß√µes s√£o extra√≠das do site Not√≠cias Agr√≠colas.")
st.sidebar.write("O projeto foi realizado pelo aluno Matheus Guimar√£es, submetido como trabalho final na disciplina de Introdu√ß√£o √† Programa√ß√£o, sob a oriennta√ß√£o do Prof. Josir Gomes.")
